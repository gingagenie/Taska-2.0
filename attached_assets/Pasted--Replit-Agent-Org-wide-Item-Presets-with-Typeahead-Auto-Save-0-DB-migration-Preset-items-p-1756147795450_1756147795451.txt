üîß Replit Agent ‚Äî Org-wide Item Presets with Typeahead + Auto-Save
0) DB migration
-- Preset items per org (e.g., Labour, Call-out, Hose)
CREATE TABLE IF NOT EXISTS item_presets (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id uuid NOT NULL REFERENCES orgs(id) ON DELETE CASCADE,
  name text NOT NULL,
  unit_amount numeric(12,2) NOT NULL DEFAULT 0,
  tax_rate numeric(5,2) NOT NULL DEFAULT 10.00, -- GST default; adjust as needed
  created_at timestamptz DEFAULT now()
);

-- One preset name per org (case-insensitive)
CREATE UNIQUE INDEX IF NOT EXISTS item_presets_org_name_unique
  ON item_presets (org_id, lower(name));

1) Server routes: search + ensure (auto-create if missing)

Create: server/routes/item-presets.ts

import { Router } from "express";
import { db } from "../db/client";
import { sql } from "drizzle-orm";
import { requireAuth } from "../middleware/auth";
import { requireOrg } from "../middleware/tenancy";

export const itemPresets = Router();

/** GET /api/item-presets?search=lab */
itemPresets.get("/", requireAuth, requireOrg, async (req, res) => {
  const orgId = (req as any).orgId;
  const q = String(req.query.search || "").trim();
  const r: any = await db.execute(sql`
    select id, name, unit_amount, tax_rate
    from item_presets
    where org_id=${orgId}::uuid
      and (${q === ""} or lower(name) like ${"%" + q.toLowerCase() + "%"})
    order by name asc
    limit 20
  `);
  res.json(r.rows);
});

/** POST /api/item-presets  { name, unit_amount, tax_rate }  (manual add in Settings) */
itemPresets.post("/", requireAuth, requireOrg, async (req, res) => {
  const orgId = (req as any).orgId;
  const { name, unit_amount, tax_rate } = req.body || {};
  if (!name || String(name).trim() === "") {
    return res.status(400).json({ error: "name required" });
  }
  const r: any = await db.execute(sql`
    insert into item_presets (org_id, name, unit_amount, tax_rate)
    values (${orgId}::uuid, ${name.trim()}, ${Number(unit_amount) || 0}, ${Number(tax_rate) ?? 0})
    on conflict (org_id, lower(name)) do update
      set unit_amount = excluded.unit_amount,
          tax_rate    = excluded.tax_rate
    returning id, name, unit_amount, tax_rate
  `);
  res.json(r.rows[0]);
});

/** POST /api/item-presets/ensure  { name, unit_amount, tax_rate }
 * Creates if not exists (used by auto-save on first use)
 */
itemPresets.post("/ensure", requireAuth, requireOrg, async (req, res) => {
  const orgId = (req as any).orgId;
  const { name, unit_amount, tax_rate } = req.body || {};
  if (!name || String(name).trim() === "") {
    return res.status(400).json({ error: "name required" });
  }
  const r: any = await db.execute(sql`
    insert into item_presets (org_id, name, unit_amount, tax_rate)
    values (${orgId}::uuid, ${name.trim()}, ${Number(unit_amount) || 0}, ${Number(tax_rate) ?? 0})
    on conflict (org_id, lower(name)) do nothing
    returning id, name, unit_amount, tax_rate
  `);
  if (r.rows?.[0]) return res.json(r.rows[0]);

  // existed ‚Äî return existing
  const e: any = await db.execute(sql`
    select id, name, unit_amount, tax_rate
    from item_presets
    where org_id=${orgId}::uuid and lower(name)=${name.trim().toLowerCase()}
    limit 1
  `);
  res.json(e.rows?.[0]);
});


Mount it in your server bootstrap:

import { itemPresets } from "./routes/item-presets";
app.use("/api/item-presets", itemPresets);

2) Client API helpers

Edit: client/src/lib/api.ts

export const itemPresetsApi = {
  search: (q: string) => api(`/api/item-presets?search=${encodeURIComponent(q)}`),
  create: (body: any) => api(`/api/item-presets`, { method: "POST", body: JSON.stringify(body) }),
  ensure: (body: any) => api(`/api/item-presets/ensure`, { method: "POST", body: JSON.stringify(body) }),
};

3) UI component: typeahead with auto-save

Create: client/src/components/billing/ItemPresetInput.tsx

import { useEffect, useMemo, useRef, useState } from "react";
import { itemPresetsApi } from "@/lib/api";
import { Input } from "@/components/ui/input";

type Preset = { id: string; name: string; unit_amount: number; tax_rate: number; };

export default function ItemPresetInput({
  description, setDescription,
  unitAmount, setUnitAmount,
  taxRate, setTaxRate,
  autoSave = true,
}: {
  description: string; setDescription: (v: string)=>void;
  unitAmount: number; setUnitAmount: (v: number)=>void;
  taxRate: number; setTaxRate: (v: number)=>void;
  autoSave?: boolean;
}) {
  const [open, setOpen] = useState(false);
  const [q, setQ] = useState(description || "");
  const [opts, setOpts] = useState<Preset[]>([]);
  const [loading, setLoading] = useState(false);
  const boxRef = useRef<HTMLDivElement>(null);

  // Debounce search
  useEffect(()=>{
    const t = setTimeout(async ()=>{
      const term = q.trim();
      setLoading(true);
      try {
        const res = await itemPresetsApi.search(term);
        setOpts(res || []);
      } catch { /* noop */ }
      setLoading(false);
      setOpen(true);
    }, 200);
    return ()=>clearTimeout(t);
  }, [q]);

  // Close popup on outside click
  useEffect(()=>{
    function onClick(e: MouseEvent){
      if (!boxRef.current) return;
      if (!boxRef.current.contains(e.target as Node)) setOpen(false);
    }
    document.addEventListener("mousedown", onClick);
    return ()=>document.removeEventListener("mousedown", onClick);
  }, []);

  async function applyPreset(p: Preset) {
    setDescription(p.name);
    setUnitAmount(Number(p.unit_amount || 0));
    setTaxRate(Number(p.tax_rate || 0));
    setQ(p.name);
    setOpen(false);
  }

  // Auto-save on blur if not matched
  async function maybeAutosave() {
    if (!autoSave) return;
    const name = q.trim();
    if (!name) return;
    const exists = opts.find(o => o.name.toLowerCase() === name.toLowerCase());
    if (exists) return; // already known
    try {
      const saved = await itemPresetsApi.ensure({
        name,
        unit_amount: Number(unitAmount || 0),
        tax_rate: Number(taxRate || 0),
      });
      // snap to any normalization the server did
      if (saved?.name) setDescription(saved.name);
    } catch { /* ignore */ }
  }

  return (
    <div ref={boxRef} className="relative">
      <Input
        value={q}
        onChange={(e)=>{ setQ(e.target.value); setDescription(e.target.value); }}
        onFocus={()=>setOpen(true)}
        onBlur={maybeAutosave}
        placeholder="Type item (e.g., Labour)‚Ä¶"
        autoComplete="off"
      />
      {open && (opts.length > 0 || loading) && (
        <div className="absolute z-30 mt-1 w-full rounded-md border bg-white shadow">
          {loading && <div className="px-3 py-2 text-sm text-gray-500">Searching‚Ä¶</div>}
          {!loading && opts.map(o=>(
            <button
              key={o.id}
              type="button"
              className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50"
              onMouseDown={(e)=> e.preventDefault()}
              onClick={()=>applyPreset(o)}
            >
              <div className="font-medium">{o.name}</div>
              <div className="text-xs text-gray-500">
                ${Number(o.unit_amount).toFixed(2)} ¬∑ Tax {Number(o.tax_rate).toFixed(2)}%
              </div>
            </button>
          ))}
          {!loading && opts.length === 0 && (
            <div className="px-3 py-2 text-sm text-gray-500">No presets‚Äîpress Tab/Enter to use ‚Äú{q}‚Äù</div>
          )}
        </div>
      )}
    </div>
  );
}

4) Wire into the LineEditor rows (Jobs/Quotes/Invoices)

Edit: client/src/components/billing/LineEditor.tsx

Replace the plain Description <Input> with ItemPresetInput.

import ItemPresetInput from "./ItemPresetInput"; // adjust path

// inside <td> for Description:
<td className="px-3 py-2">
  <ItemPresetInput
    description={l.description}
    setDescription={(v)=>change(i,{ description: v })}
    unitAmount={Number(l.unit_amount)}
    setUnitAmount={(v)=>change(i,{ unit_amount: Number(v) })}
    taxRate={Number(l.tax_rate)}
    setTaxRate={(v)=>change(i,{ tax_rate: Number(v) })}
    autoSave={true}
  />
</td>


Result: user types ‚Üí suggestions appear; selecting fills unit price + tax. If no match exists, on blur we auto-create a preset with the current description/unit/tax.

5) Settings page to manage presets (optional but recommended)

Create: client/src/pages/settings-items.tsx

import { useEffect, useState } from "react";
import { itemPresetsApi } from "@/lib/api";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export default function SettingsItems() {
  const [list, setList] = useState<any[]>([]);
  const [name, setName] = useState("");
  const [unit, setUnit] = useState("0");
  const [tax, setTax] = useState("10");

  async function load() { setList(await itemPresetsApi.search("")); }
  useEffect(()=>{ load(); }, []);

  async function add() {
    await itemPresetsApi.create({
      name: name.trim(),
      unit_amount: Number(unit || 0),
      tax_rate: Number(tax || 0),
    });
    setName(""); setUnit("0"); setTax("10");
    await load();
  }

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-xl font-bold">Items (Org-wide presets)</h1>
      <div className="grid md:grid-cols-4 gap-3 max-w-3xl">
        <Input placeholder="Name (e.g., Labour)" value={name} onChange={e=>setName(e.target.value)} />
        <Input placeholder="Unit $" inputMode="decimal" value={unit} onChange={e=>setUnit(e.target.value)} />
        <Input placeholder="Tax %" inputMode="decimal" value={tax} onChange={e=>setTax(e.target.value)} />
        <Button onClick={add}>Add / Update</Button>
      </div>

      <div className="max-w-3xl overflow-x-auto">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-3 py-2 text-left">Name</th>
              <th className="px-3 py-2 text-right">Unit</th>
              <th className="px-3 py-2 text-right">Tax %</th>
            </tr>
          </thead>
          <tbody>
            {list.map((p:any)=>(
              <tr key={p.id} className="border-b">
                <td className="px-3 py-2">{p.name}</td>
                <td className="px-3 py-2 text-right">${Number(p.unit_amount).toFixed(2)}</td>
                <td className="px-3 py-2 text-right">{Number(p.tax_rate).toFixed(2)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
